const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mock
const mockCustomers = [
  { name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', phone: '081-111-1111', area: '‡∏™‡∏µ‡∏•‡∏°' },
  { name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô', phone: '082-222-2222', area: '‡∏™‡∏≤‡∏ó‡∏£' },
  { name: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ ‡∏Ç‡∏¢‡∏±‡∏ô', phone: '083-333-3333', area: '‡∏≠‡πÇ‡∏®‡∏Å' },
  { name: '‡∏õ‡∏£‡∏∞‡∏ä‡∏≤ ‡πÉ‡∏à‡∏á‡∏≤‡∏°', phone: '084-444-4444', area: '‡∏û‡∏ç‡∏≤‡πÑ‡∏ó' },
  { name: '‡∏™‡∏∏‡∏î‡∏≤ ‡∏£‡∏±‡∏Å‡∏î‡∏µ', phone: '085-555-5555', area: '‡∏£‡∏±‡∏ä‡∏î‡∏≤' },
  { name: '‡∏°‡∏≤‡∏ô‡∏û ‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', phone: '086-666-6666', area: '‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß' },
  { name: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏°‡∏µ‡πÉ‡∏à', phone: '087-777-7777', area: '‡∏ö‡∏≤‡∏á‡∏ô‡∏≤' },
  { name: '‡∏ö‡∏∏‡∏ç‡∏ä‡∏π ‡πÉ‡∏à‡∏î‡∏µ', phone: '088-888-8888', area: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó' }
];

const addresses = [
  '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏µ‡∏•‡∏° ‡πÅ‡∏Ç‡∏ß‡∏á‡∏™‡∏µ‡∏•‡∏° ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10500',
  '456 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏ó‡∏£‡πÉ‡∏ï‡πâ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏°‡∏´‡∏≤‡πÄ‡∏°‡∏Ü ‡πÄ‡∏Ç‡∏ï‡∏™‡∏≤‡∏ó‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10120',
  '789 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
  '321 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡πÄ‡∏Ç‡∏ï‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400',
  '654 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡πÅ‡∏Ç‡∏ß‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡πÄ‡∏Ç‡∏ï‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400',
  '987 ‡∏ñ‡∏ô‡∏ô‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÅ‡∏Ç‡∏ß‡∏á‡∏à‡∏≠‡∏°‡∏û‡∏• ‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10900',
  '147 ‡∏ñ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏ô‡∏≤-‡∏ï‡∏£‡∏≤‡∏î ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ö‡∏≤‡∏á‡∏ô‡∏≤ ‡πÄ‡∏Ç‡∏ï‡∏öang‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10260',
  '258 ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡πÄ‡∏Ç‡∏ï‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400'
];

const orderNotes = [
  '‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢',
  '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å',
  '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏ß',
  '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á',
  '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å',
  '‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢',
  '',
  '‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°'
];

const orderStatuses = ['pending', 'confirmed', 'preparing', 'ready', 'delivered'];

// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (1-4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
function getRandomItemCount() {
  return Math.floor(Math.random() * 4) + 1;
}

// ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô (1-3 ‡∏ä‡∏¥‡πâ‡∏ô)
function getRandomQuantity() {
  return Math.floor(Math.random() * 3) + 1;
}

// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï (1-7 ‡∏ß‡∏±‡∏ô)
function getRandomPastDate() {
  const now = new Date();
  const daysAgo = Math.floor(Math.random() * 7) + 1;
  const hoursAgo = Math.floor(Math.random() * 24);
  const minutesAgo = Math.floor(Math.random() * 60);
  
  return new Date(now.getTime() - (daysAgo * 24 * 60 * 60 * 1000) - (hoursAgo * 60 * 60 * 1000) - (minutesAgo * 60 * 1000));
}

async function generateMockOrders(count = 20) {
  try {
    console.log(`üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå Mock ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: menuItems, error: menuError } = await supabase
      .from('menu_items')
      .select('id, name, price')
      .eq('is_available', true);

    if (menuError || !menuItems?.length) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ');
      return;
    }

    console.log(`üìã ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ${menuItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    for (let i = 0; i < count; i++) {
      // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      const customer = mockCustomers[Math.floor(Math.random() * mockCustomers.length)];
      const address = addresses[Math.floor(Math.random() * addresses.length)];
      const note = orderNotes[Math.floor(Math.random() * orderNotes.length)];
      const status = orderStatuses[Math.floor(Math.random() * orderStatuses.length)];
      const createdAt = getRandomPastDate();

      // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      const itemCount = getRandomItemCount();
      const selectedItems = [];
      const usedMenuIds = new Set();

      for (let j = 0; j < itemCount; j++) {
        let menuItem;
        do {
          menuItem = menuItems[Math.floor(Math.random() * menuItems.length)];
        } while (usedMenuIds.has(menuItem.id));
        
        usedMenuIds.add(menuItem.id);
        const quantity = getRandomQuantity();
        
        selectedItems.push({
          menu_item_id: menuItem.id,
          menu_item_name: menuItem.name,
          quantity,
          unit_price: menuItem.price,
          total_price: menuItem.price * quantity
        });
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
      const total_amount = selectedItems.reduce((sum, item) => sum + item.total_price, 0);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert([{
          customer_name: customer.name,
          customer_phone: customer.phone,
          customer_address: address,
          status: status,
          total_amount: total_amount,
          notes: note,
          created_at: createdAt.toISOString(),
          updated_at: createdAt.toISOString()
        }])
        .select()
        .single();

      if (orderError) {
        console.log(`‚ùå Error creating order ${i + 1}:`, orderError.message);
        continue;
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(selectedItems.map(item => ({
          ...item,
          order_id: order.id
        })));

      if (itemsError) {
        console.log(`‚ùå Error adding items to order ${i + 1}:`, itemsError.message);
      } else {
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${i + 1}/${count}: ${customer.name} - ‡∏ø${total_amount}`);
      }
    }

    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå Mock ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const { data: stats } = await supabase
      .from('orders')
      .select('status')
      .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());

    if (stats) {
      const statusCount = stats.reduce((acc, order) => {
        acc[order.status] = (acc[order.status] || 0) + 1;
        return acc;
      }, {});

      console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏≠‡∏ö 7 ‡∏ß‡∏±‡∏ô:');
      Object.entries(statusCount).forEach(([status, count]) => {
        console.log(`   ${status}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      });
    }

  } catch (error) {
    console.error('üí• Error generating mock orders:', error);
  }
}

// ‡∏£‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  const count = process.argv[2] ? parseInt(process.argv[2]) : 20;
  generateMockOrders(count);
}

module.exports = { generateMockOrders };
