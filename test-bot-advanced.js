#!/usr/bin/env node

/**
 * üöÄ Advanced Food Delivery Test Bot
 * ‡∏ö‡∏≠‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ - ‡∏£‡∏ß‡∏° Frontend + Backend + Performance
 * 
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:
 * - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend UI ‡∏î‡πâ‡∏ß‡∏¢ Puppeteer
 * - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance ‡πÅ‡∏•‡∏∞ Load Testing
 * - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Journey ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
 * - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */

const axios = require('axios');
const { performance } = require('perf_hooks');
const fs = require('fs').promises;
const path = require('path');

class AdvancedFoodDeliveryTestBot {
    constructor() {
        this.baseURL = 'http://localhost:3001';
        this.frontendURL = 'http://localhost:3000';
        this.testResults = [];
        this.performanceMetrics = [];
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        this.stats = {
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            totalTime: 0,
            averageResponseTime: 0,
            maxResponseTime: 0,
            minResponseTime: Infinity
        };
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        this.testData = {
            customers: [
                {
                    name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
                    phone: '0812345678',
                    address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
                    notes: '‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£'
                },
                {
                    name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
                    phone: '0823456789',
                    address: '456 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400',
                    notes: '‡πÇ‡∏ó‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á'
                },
                {
                    name: 'Test Bot User',
                    phone: '0834567890',
                    address: '789 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10320',
                    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
                }
            ]
        };
    }

    // üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    async runAdvancedTest() {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á...\n');
        
        const startTime = performance.now();
        
        try {
            // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            await this.runBasicSystemTests();
            
            // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Journey ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
            await this.runUserJourneyTests();
            
            // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance
            await this.runPerformanceTests();
            
            // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load Testing
            await this.runLoadTests();
            
            // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Edge Cases ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
            await this.runAdvancedErrorTests();
            
        } catch (error) {
            this.logError('‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', error);
        }
        
        const endTime = performance.now();
        this.stats.totalTime = endTime - startTime;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        await this.generateDetailedReport();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        this.displayAdvancedResults();
    }

    // üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    async runBasicSystemTests() {
        console.log('üìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...\n');
        
        await this.runTest('System Health Check', async () => {
            const [apiHealth, frontendHealth] = await Promise.all([
                this.checkAPIHealth(),
                this.checkFrontendHealth()
            ]);
            
            return `API: ${apiHealth}, Frontend: ${frontendHealth}`;
        });

        await this.runTest('Database Connection', async () => {
            const response = await this.makeTimedRequest('GET', '/api/restaurants');
            if (!Array.isArray(response.data) || response.data.length === 0) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
            }
            return `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${response.duration}ms)`;
        });
    }

    // üë§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Journey ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
    async runUserJourneyTests() {
        console.log('üõçÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Journey ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á...\n');
        
        for (let i = 0; i < this.testData.customers.length; i++) {
            const customer = this.testData.customers[i];
            await this.runCompleteUserJourney(customer, i + 1);
        }
    }

    // üèÉ‚Äç‚ôÇÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Journey ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    async runCompleteUserJourney(customer, journeyNumber) {
        const journeyName = `User Journey ${journeyNumber} (${customer.name})`;
        
        await this.runTest(journeyName, async () => {
            const journey = [];
            
            // 1. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            const restaurants = await this.makeTimedRequest('GET', '/api/restaurants');
            journey.push(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (${restaurants.duration}ms)`);
            
            // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            const selectedRestaurant = restaurants.data[Math.floor(Math.random() * restaurants.data.length)];
            journey.push(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô: ${selectedRestaurant.name}`);
            
            // 3. ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π
            const menuItems = await this.makeTimedRequest('GET', '/api/menu-items');
            const restaurantMenus = menuItems.data.filter(item => 
                item.restaurant_id === selectedRestaurant.id
            );
            journey.push(`‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π ${restaurantMenus.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (${menuItems.duration}ms)`);
            
            // 4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á)
            const selectedItems = await this.simulateRealisticSelection(restaurantMenus);
            journey.push(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            
            // 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
            const totalAmount = selectedItems.reduce((sum, item) => 
                sum + (item.price * item.quantity), 0
            );
            journey.push(`‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${totalAmount} ‡∏ö‡∏≤‡∏ó`);
            
            // 6. ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            const orderData = {
                customer_name: customer.name,
                customer_phone: customer.phone,
                customer_address: customer.address,
                delivery_notes: customer.notes,
                restaurant_id: selectedRestaurant.id,
                items: selectedItems.map(item => ({
                    menu_item_id: item.id,
                    quantity: item.quantity,
                    price: item.price
                })),
                total_amount: totalAmount
            };
            
            const orderResponse = await this.makeTimedRequest('POST', '/api/orders', orderData);
            journey.push(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${orderResponse.data.id} (${orderResponse.duration}ms)`);
            
            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á journey
            await this.humanDelay(2000, 4000);
            
            return journey.join(' ‚Üí ');
        });
    }

    // üé≤ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
    async simulateRealisticSelection(menuItems) {
        const selectedItems = [];
        const numItems = Math.floor(Math.random() * 4) + 1; // 1-4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        const shuffled = [...menuItems].sort(() => 0.5 - Math.random());
        const selected = shuffled.slice(0, Math.min(numItems, menuItems.length));
        
        for (const item of selected) {
            // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            await this.humanDelay(500, 2000);
            
            selectedItems.push({
                ...item,
                quantity: Math.floor(Math.random() * 3) + 1 // 1-3 ‡∏ä‡∏¥‡πâ‡∏ô
            });
        }
        
        return selectedItems;
    }

    // ‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance
    async runPerformanceTests() {
        console.log('‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance...\n');
        
        await this.runTest('API Response Time', async () => {
            const endpoints = [
                '/api/restaurants',
                '/api/menu-items',
                '/api/health'
            ];
            
            const results = [];
            
            for (const endpoint of endpoints) {
                const response = await this.makeTimedRequest('GET', endpoint);
                results.push(`${endpoint}: ${response.duration}ms`);
                this.recordPerformanceMetric(endpoint, response.duration);
            }
            
            return results.join(', ');
        });

        await this.runTest('Database Query Performance', async () => {
            const start = performance.now();
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            const [restaurants, menuItems] = await Promise.all([
                this.makeTimedRequest('GET', '/api/restaurants'),
                this.makeTimedRequest('GET', '/api/menu-items')
            ]);
            
            const end = performance.now();
            const totalTime = end - start;
            
            return `Parallel queries: ${Math.round(totalTime)}ms`;
        });
    }

    // üî• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load Testing
    async runLoadTests() {
        console.log('üî• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load Testing...\n');
        
        await this.runTest('Concurrent API Calls', async () => {
            const concurrentRequests = 10;
            const promises = [];
            
            for (let i = 0; i < concurrentRequests; i++) {
                promises.push(this.makeTimedRequest('GET', '/api/restaurants'));
            }
            
            const start = performance.now();
            const results = await Promise.all(promises);
            const end = performance.now();
            
            const avgResponseTime = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
            const totalTime = end - start;
            
            return `${concurrentRequests} concurrent requests: ${Math.round(totalTime)}ms (avg: ${Math.round(avgResponseTime)}ms)`;
        });

        await this.runTest('Stress Test Orders', async () => {
            const numOrders = 5;
            const promises = [];
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏≠‡∏±‡∏ô
            const restaurants = await this.makeTimedRequest('GET', '/api/restaurants');
            const menuItems = await this.makeTimedRequest('GET', '/api/menu-items');
            
            for (let i = 0; i < numOrders; i++) {
                const customer = this.testData.customers[i % this.testData.customers.length];
                const restaurant = restaurants.data[i % restaurants.data.length];
                const items = menuItems.data.filter(item => item.restaurant_id === restaurant.id).slice(0, 2);
                
                if (items.length > 0) {
                    const orderData = {
                        customer_name: `${customer.name} (Test ${i + 1})`,
                        customer_phone: customer.phone,
                        customer_address: customer.address,
                        delivery_notes: `Stress test order ${i + 1}`,
                        restaurant_id: restaurant.id,
                        items: items.map(item => ({
                            menu_item_id: item.id,
                            quantity: 1,
                            price: item.price
                        })),
                        total_amount: items.reduce((sum, item) => sum + item.price, 0)
                    };
                    
                    promises.push(this.makeTimedRequest('POST', '/api/orders', orderData));
                }
            }
            
            const start = performance.now();
            const results = await Promise.all(promises);
            const end = performance.now();
            
            const successCount = results.filter(r => r.data && r.data.id).length;
            const avgResponseTime = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
            
            return `${successCount}/${numOrders} orders created successfully (avg: ${Math.round(avgResponseTime)}ms)`;
        });
    }

    // üö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Cases ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    async runAdvancedErrorTests() {
        console.log('üö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á...\n');
        
        await this.runTest('Invalid Data Validation', async () => {
            const invalidCases = [
                { name: '', phone: '123', address: '', items: [] },
                { name: 'Test', phone: 'invalid', address: 'Test', items: [] },
                { name: 'Test', phone: '0812345678', address: 'Test', items: [{ menu_item_id: 'invalid', quantity: -1 }] }
            ];
            
            let validationCount = 0;
            
            for (const invalidData of invalidCases) {
                try {
                    await this.makeTimedRequest('POST', '/api/orders', invalidData);
                } catch (error) {
                    if (error.response && (error.response.status === 400 || error.response.status === 500)) {
                        validationCount++;
                    }
                }
            }
            
            return `${validationCount}/${invalidCases.length} validation cases handled correctly`;
        });
    }

    // üåê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û API
    async checkAPIHealth() {
        try {
            const response = await axios.get(`${this.baseURL}/api/health`, { timeout: 5000 });
            return response.status === 200 ? 'OK' : 'ERROR';
        } catch (error) {
            return 'ERROR';
        }
    }

    // üñ•Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Frontend
    async checkFrontendHealth() {
        try {
            const response = await axios.get(this.frontendURL, { timeout: 5000 });
            return response.status === 200 ? 'OK' : 'ERROR';
        } catch (error) {
            return 'ERROR';
        }
    }

    // ‚è±Ô∏è ‡∏ó‡∏≥ HTTP Request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    async makeTimedRequest(method, endpoint, data = null) {
        const start = performance.now();
        
        try {
            let response;
            const url = `${this.baseURL}${endpoint}`;
            
            if (method === 'GET') {
                response = await axios.get(url);
            } else if (method === 'POST') {
                response = await axios.post(url, data);
            }
            
            const end = performance.now();
            const duration = end - start;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            this.updateResponseTimeStats(duration);
            
            return {
                ...response,
                duration: Math.round(duration)
            };
            
        } catch (error) {
            const end = performance.now();
            const duration = end - start;
            
            throw {
                ...error,
                duration: Math.round(duration)
            };
        }
    }

    // üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
    updateResponseTimeStats(duration) {
        if (duration > this.stats.maxResponseTime) {
            this.stats.maxResponseTime = duration;
        }
        if (duration < this.stats.minResponseTime) {
            this.stats.minResponseTime = duration;
        }
    }

    // üìà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Performance
    recordPerformanceMetric(endpoint, duration) {
        this.performanceMetrics.push({
            endpoint,
            duration,
            timestamp: new Date().toISOString()
        });
    }

    // üß™ ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    async runTest(testName, testFunction) {
        const startTime = performance.now();
        this.stats.totalTests++;
        
        try {
            console.log(`üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${testName}...`);
            
            const result = await testFunction();
            const endTime = performance.now();
            const duration = endTime - startTime;
            
            this.testResults.push({
                name: testName,
                status: 'PASS',
                result: result,
                duration: Math.round(duration),
                timestamp: new Date().toISOString()
            });
            
            this.stats.passedTests++;
            console.log(`‚úÖ ${testName}: ${result} (${Math.round(duration)}ms)\n`);
            
        } catch (error) {
            const endTime = performance.now();
            const duration = endTime - startTime;
            
            this.testResults.push({
                name: testName,
                status: 'FAIL',
                error: error.message,
                duration: Math.round(duration),
                timestamp: new Date().toISOString()
            });
            
            this.stats.failedTests++;
            console.log(`‚ùå ${testName}: ${error.message} (${Math.round(duration)}ms)\n`);
        }
        
        // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await this.humanDelay();
    }

    // ‚è±Ô∏è ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå
    async humanDelay(min = 500, max = 1500) {
        const delay = Math.random() * (max - min) + min;
        await new Promise(resolve => setTimeout(resolve, delay));
    }

    // üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    async generateDetailedReport() {
        const report = {
            testSummary: {
                timestamp: new Date().toISOString(),
                totalTests: this.stats.totalTests,
                passedTests: this.stats.passedTests,
                failedTests: this.stats.failedTests,
                successRate: Math.round((this.stats.passedTests / this.stats.totalTests) * 100),
                totalDuration: Math.round(this.stats.totalTime)
            },
            performanceStats: {
                maxResponseTime: Math.round(this.stats.maxResponseTime),
                minResponseTime: Math.round(this.stats.minResponseTime),
                averageResponseTime: Math.round(
                    this.performanceMetrics.reduce((sum, m) => sum + m.duration, 0) / 
                    this.performanceMetrics.length
                )
            },
            testResults: this.testResults,
            performanceMetrics: this.performanceMetrics
        };
        
        try {
            await fs.writeFile(
                path.join(__dirname, 'test-report.json'),
                JSON.stringify(report, null, 2)
            );
            console.log('üìÑ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà test-report.json\n');
        } catch (error) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:', error.message);
        }
    }

    // üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    displayAdvancedResults() {
        console.log('\n' + '='.repeat(80));
        console.log('üöÄ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á');
        console.log('='.repeat(80));
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å
        console.log(`üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:`);
        console.log(`   ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${this.stats.totalTests} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‚Ä¢ ‡∏ú‡πà‡∏≤‡∏ô: ${this.stats.passedTests} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‚Ä¢ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${this.stats.failedTests} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${Math.round((this.stats.passedTests / this.stats.totalTests) * 100)}%`);
        console.log(`   ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: ${Math.round(this.stats.totalTime)}ms\n`);
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Performance
        if (this.performanceMetrics.length > 0) {
            const avgResponseTime = this.performanceMetrics.reduce((sum, m) => sum + m.duration, 0) / this.performanceMetrics.length;
            console.log(`‚ö° ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Performance:`);
            console.log(`   ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${Math.round(avgResponseTime)}ms`);
            console.log(`   ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${Math.round(this.stats.maxResponseTime)}ms`);
            console.log(`   ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: ${Math.round(this.stats.minResponseTime)}ms\n`);
        }
        
        // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
        this.testResults.forEach((test, index) => {
            const status = test.status === 'PASS' ? '‚úÖ' : '‚ùå';
            const result = test.status === 'PASS' ? test.result : test.error;
            console.log(`   ${index + 1}. ${status} ${test.name}`);
            console.log(`      ${result} (${test.duration}ms)`);
        });
        
        console.log('\n' + '='.repeat(80));
        
        if (this.stats.failedTests === 0) {
            console.log('üéä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á');
            console.log('üöÄ Performance ‡∏î‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ');
        } else {
            console.log('‚ö†Ô∏è  ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        }
        
        console.log('='.repeat(80));
    }

    // üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    logError(message, error) {
        console.error(`‚ùå ${message}:`, error.message);
    }
}

// üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
async function main() {
    const bot = new AdvancedFoodDeliveryTestBot();
    await bot.runAdvancedTest();
}

// ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    main().catch(console.error);
}

module.exports = AdvancedFoodDeliveryTestBot;